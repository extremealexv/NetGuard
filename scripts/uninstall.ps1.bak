# Netureon Uninstall Script for Windows
Write-Host "🗑️ Netureon Uninstallation Script" -ForegroundColor Cyan
Write-Host "============================" -ForegroundColor Cyan

# Function to print status messages
function Write-Status {
    param($Message, $Type = "Info")
    
    switch ($Type) {
        "Info" { 
            Write-Host "ℹ️ $Message" -ForegroundColor Cyan 
        }
        "Success" { 
            Write-Host "✅ $Message" -ForegroundColor Green 
        }
        "Warning" { 
            Write-Host "⚠️ $Message" -ForegroundColor Yellow 
        }
        "Error" { 
            Write-Host "❌ $Message" -ForegroundColor Red 
        }
    }
}

# Check if running as administrator
if (-not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Status "This script must be run as Administrator" -Type "Error"
    exit 1
}

# Ask for confirmation
Write-Host
Write-Status "WARNING: This will remove all Netureon services and their data" -Type "Warning"
Write-Host "The following actions will be performed:"
Write-Host "1. Stop all Netureon services"
Write-Host "2. Remove Windows services"
Write-Host "3. Remove service configurations"
Write-Host "4. Clean up program data"
Write-Host
$confirm = Read-Host "Do you want to proceed? (y/N)"
if ($confirm -notmatch "^[yY]") {
    Write-Status "Uninstallation cancelled" -Type "Info"
    exit 0
}

# Stop services
Write-Status "Stopping Netureon services..."
$services = @(
    "Netureon",
    "NetureonAlerts",
    "NetureonScan",
    "NetureonWeb"
)

foreach ($service in $services) {
    if (Get-Service -Name $service -ErrorAction SilentlyContinue) {
        try {
            Stop-Service -Name $service -Force
            Write-Status "Stopped $service" -Type "Success"
        } catch {
            Write-Status "Failed to stop $service" -Type "Error"
        }
    }
}

# Remove services
Write-Status "Removing services..."
foreach ($service in $services) {
    if (Get-Service -Name $service -ErrorAction SilentlyContinue) {
        try {
            sc.exe delete $service
            Write-Status "Removed $service" -Type "Success"
        } catch {
            Write-Status "Failed to remove $service" -Type "Error"
        }
    }
}

# Backup database
Write-Status "Backing up database..."
try {
    Get-Content ".env" | ForEach-Object {
        $name, $value = $_.split('=')
        Set-Item -Path "Env:$name" -Value $value
    }

    $timestamp = Get-Date -Format "yyyyMMddHHmmss"
    $backupFile = "netureon_backup_$timestamp.sql"

    $env:PGPASSWORD = $env:DB_PASS
    pg_dump -h $env:DB_HOST -p $env:DB_PORT -U $env:DB_USER $env:DB_NAME > $backupFile
    Write-Status "Database backup created: $backupFile" -Type "Success"
} catch {
    Write-Status "Failed to backup database: $_" -Type "Error"
}

# Clean up program files
Write-Status "Cleaning up program files..."
$filesToRemove = @(
    "run_netureon.bat",
    "run_alert_daemon.bat",
    "run_scan.bat",
    "run_webui.bat"
)

foreach ($file in $filesToRemove) {
    if (Test-Path $file) {
        try {
            Remove-Item $file -Force
            Write-Status "Removed $file" -Type "Success"
        } catch {
            Write-Status "Failed to remove $file" -Type "Error"
        }
    }
}

Write-Status "Uninstallation complete" -Type "Success"
Write-Host
Write-Host "Note: The database and its data have been preserved."
Write-Host "A backup has been created in the current directory."
Write-Host "To completely remove all data, manually drop the database:"
Write-Host "psql -U postgres -c 'DROP DATABASE netureon'"
