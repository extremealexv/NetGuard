# Netureon Health Check Utility
Write-Output "üõ°Ô∏è Netureon Health Check"
Write-Output "====================="

# Check if PostgreSQL is running
function Test-PostgreSQL {
    Write-Output "üìä Checking PostgreSQL connection..."
    
    # Load environment variables from .env file
    $envContent = Get-Content .env | Where-Object { $_ -notmatch '^#' -and $_.Trim() }
    $envVars = @{}
    foreach ($line in $envContent) {
        if ($line -match '(.+)=(.+)') {
            $envVars[$Matches[1].Trim()] = $Matches[2].Trim()
        }
    }

    $env:PGPASSWORD = $envVars['DB_PASSWORD']
    try {
        & psql -h $envVars['DB_HOST'] -U $envVars['DB_USER'] -d $envVars['DB_NAME'] -c "SELECT 1" > $null 2>&1
        if ($LASTEXITCODE -eq 0) {
            Write-Output "‚úÖ Database connection successful"
            return $true
        } else {
            Write-Output "‚ùå Database connection failed"
            return $false
        }
    } catch {
        Write-Output "‚ùå Database connection failed: $_"
        return $false
    }
}

# Check if required services are running
function Test-Services {
    Write-Output "`nüîç Checking Netureon services..."
    
    $services = @(
        "Netureon",
        "NetureonAlerts",
        "NetureonWeb",
        "NetureonScan"
    )

    $allOk = $true
    foreach ($service in $services) {
        $status = Get-Service -Name $service -ErrorAction SilentlyContinue
        if ($status) {
            if ($status.Status -eq 'Running') {
                Write-Output "‚úÖ $service is running"
            } else {
                Write-Output "‚ùå $service is not running (Status: $($status.Status))"
                $allOk = $false
            }
        } else {
            Write-Output "‚ùå $service not found"
            $allOk = $false
        }
    }
    return $allOk
}

# Check if required ports are open
function Test-Ports {
    Write-Output "`nüîå Checking required ports..."
    
    $ports = @(
        @{Port=5000; Service="Web Interface"},
        @{Port=5432; Service="PostgreSQL"}
    )

    $allOk = $true
    foreach ($portInfo in $ports) {
        $result = Test-NetConnection -ComputerName localhost -Port $portInfo.Port -WarningAction SilentlyContinue
        if ($result.TcpTestSucceeded) {
            Write-Output "‚úÖ Port $($portInfo.Port) ($($portInfo.Service)) is open"
        } else {
            Write-Output "‚ùå Port $($portInfo.Port) ($($portInfo.Service)) is closed"
            $allOk = $false
        }
    }
    return $allOk
}

# Check Python environment
function Test-PythonEnv {
    Write-Output "`nüêç Checking Python environment..."
    
    if (Test-Path "venv") {
        Write-Output "‚úÖ Virtual environment exists"
        
        try {
            & venv\Scripts\python.exe -c "import sys; print(f'Python {sys.version_info.major}.{sys.version_info.minor}')" 2>$null
            if ($LASTEXITCODE -eq 0) {
                Write-Output "‚úÖ Python interpreter is working"
                return $true
            } else {
                Write-Output "‚ùå Python interpreter test failed"
                return $false
            }
        } catch {
            Write-Output "‚ùå Failed to run Python interpreter: $_"
            return $false
        }
    } else {
        Write-Output "‚ùå Virtual environment not found"
        return $false
    }
}

# Check disk space
function Test-DiskSpace {
    Write-Output "`nüíæ Checking disk space..."
    
    $drive = Get-PSDrive -Name (Split-Path -Qualifier $PWD.Path)
    $freeSpaceGB = [math]::Round($drive.Free / 1GB, 2)
    $totalSpaceGB = [math]::Round(($drive.Free + $drive.Used) / 1GB, 2)
    $usedPercent = [math]::Round(($drive.Used / ($drive.Free + $drive.Used)) * 100, 2)
    
    Write-Output "Drive $($drive.Name):"
    Write-Output "Free: $freeSpaceGB GB"
    Write-Output "Total: $totalSpaceGB GB"
    Write-Output "Used: $usedPercent%"
    
    if ($freeSpaceGB -lt 5) {
        Write-Output "‚ùå Low disk space warning (less than 5GB free)"
        return $false
    } else {
        Write-Output "‚úÖ Disk space is adequate"
        return $true
    }
}

# Run all checks
$overallStatus = $true

Write-Output "Starting health checks..."
Write-Output "------------------------"

if (-not (Test-PostgreSQL)) { $overallStatus = $false }
if (-not (Test-Services)) { $overallStatus = $false }
if (-not (Test-Ports)) { $overallStatus = $false }
if (-not (Test-PythonEnv)) { $overallStatus = $false }
if (-not (Test-DiskSpace)) { $overallStatus = $false }

Write-Output "`n------------------------"
if ($overallStatus) {
    Write-Output "‚úÖ All checks passed"
    exit 0
} else {
    Write-Output "‚ùå Some checks failed"
    exit 1
}
