# Setup script for Netureon on Windows
Write-Host "üöÄ Starting Netureon setup..." -ForegroundColor Cyan

# Check Python installation
Write-Host "üêç Checking Python installation..." -ForegroundColor Yellow
try {
    $pythonVersion = python -c "import sys; print('.'.join(map(str, sys.version_info[:2])))"
    if ([version]$pythonVersion -lt [version]"3.8") {
        Write-Host "‚ùå Python 3.8 or higher is required. Found version $pythonVersion" -ForegroundColor Red
        exit 1
    }
    Write-Host "‚úÖ Found Python $pythonVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Python 3 is not installed or not in PATH. Please install Python 3.8 or higher." -ForegroundColor Red
    exit 1
}

# Create virtual environment if it doesn't exist
if (-not (Test-Path "venv")) {
    Write-Host "üì¶ Creating virtual environment..." -ForegroundColor Yellow
    try {
        python -m venv venv
    } catch {
        Write-Host "‚ùå Failed to create virtual environment" -ForegroundColor Red
        exit 1
    }
} else {
    Write-Host "‚úÖ Virtual environment exists" -ForegroundColor Green
}

# Activate virtual environment
Write-Host "üîå Activating virtual environment..." -ForegroundColor Yellow
try {
    .\venv\Scripts\Activate.ps1
} catch {
    Write-Host "‚ùå Failed to activate virtual environment" -ForegroundColor Red
    exit 1
}

# Install dependencies
Write-Host "üì• Installing dependencies..." -ForegroundColor Yellow
try {
    python -m pip install --upgrade pip
    pip install -r requirements.txt
} catch {
    Write-Host "‚ùå Failed to install dependencies" -ForegroundColor Red
    exit 1
}

# Database configuration
Write-Host "üóÑÔ∏è Database configuration..." -ForegroundColor Yellow

# Create .env file if it doesn't exist
if (-not (Test-Path ".env")) {
    Write-Host "Please enter PostgreSQL database credentials:" -ForegroundColor Cyan
    
    $dbHost = Read-Host "Database host (default: localhost)"
    if (-not $dbHost) { $dbHost = "localhost" }
    
    $dbPort = Read-Host "Database port (default: 5432)"
    if (-not $dbPort) { $dbPort = "5432" }
    
    $dbName = Read-Host "Database name (default: netureon)"
    if (-not $dbName) { $dbName = "netureon" }
    
    $dbUser = Read-Host "Database user (default: postgres)"
    if (-not $dbUser) { $dbUser = "postgres" }
    
    $dbPass = Read-Host "Database password" -AsSecureString
    $BSTR = [System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($dbPass)
    $dbPassword = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto($BSTR)

    # Write database configuration to .env
    @"
DB_HOST=$dbHost
DB_PORT=$dbPort
DB_NAME=$dbName
DB_USER=$dbUser
DB_PASS=$dbPassword
"@ | Out-File -FilePath ".env" -Encoding UTF8
    
    Write-Host "‚úÖ Database configuration saved" -ForegroundColor Green
}

# Import database schema
Write-Host "üîÑ Importing database schema..." -ForegroundColor Yellow

# Load environment variables
Get-Content ".env" | ForEach-Object {
    $name, $value = $_.split('=')
    Set-Item -Path "Env:$name" -Value $value
}

try {
    $env:PGPASSWORD = $env:DB_PASS
    psql -h $env:DB_HOST -p $env:DB_PORT -U $env:DB_USER -d $env:DB_NAME -f schema.sql
} catch {
    Write-Host "‚ùå Failed to import database schema" -ForegroundColor Red
    exit 1
}

# Setup Windows services
Write-Host "‚öôÔ∏è Setting up Windows services..." -ForegroundColor Yellow

# Create service bat files
@"
@echo off
cd %~dp0
call venv\Scripts\activate
python main.py
"@ | Out-File -FilePath "run_netureon.bat" -Encoding ASCII

@"
@echo off
cd %~dp0
call venv\Scripts\activate
python alert_daemon.py
"@ | Out-File -FilePath "run_alert_daemon.bat" -Encoding ASCII

@"
@echo off
cd %~dp0
call venv\Scripts\activate
python net_scan.py
"@ | Out-File -FilePath "run_scan.bat" -Encoding ASCII

@"
@echo off
cd %~dp0
call venv\Scripts\activate
python webui/app.py
"@ | Out-File -FilePath "run_webui.bat" -Encoding ASCII

# Create services
try {
    # Main service
    New-Service -Name "Netureon" `
                -DisplayName "Netureon Network Monitor" `
                -Description "Network monitoring and device tracking service" `
                -BinaryPathName "`"$PWD\run_netureon.bat`"" `
                -StartupType Automatic `
                -DependsOn postgresql-x64-14

    # Alert daemon service
    New-Service -Name "NetureonAlerts" `
                -DisplayName "Netureon Alert Service" `
                -Description "Network alert monitoring and notification service" `
                -BinaryPathName "`"$PWD\run_alert_daemon.bat`"" `
                -StartupType Automatic `
                -DependsOn Netureon

    # Network scanner service
    New-Service -Name "NetureonScan" `
                -DisplayName "Netureon Network Scanner" `
                -Description "Network device scanning service" `
                -BinaryPathName "`"$PWD\run_scan.bat`"" `
                -StartupType Manual

    # Web interface service
    New-Service -Name "NetureonWeb" `
                -DisplayName "Netureon Web Interface" `
                -Description "Web interface for network monitoring" `
                -BinaryPathName "`"$PWD\run_webui.bat`"" `
                -StartupType Automatic `
                -DependsOn postgresql-x64-14

    Write-Host "‚úÖ Services created successfully" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Failed to create services: $_" -ForegroundColor Red
}

# Test email configuration
Write-Host "üîÑ Testing email configuration..." -ForegroundColor Yellow

# Send test email
if (Test-Path ".env") {
    try {
        python -c @'
import smtplib
from email.message import EmailMessage
from os import environ
from dotenv import load_dotenv

load_dotenv()

msg = EmailMessage()
msg.set_content("This is a test email from Netureon setup.")
msg["Subject"] = "Netureon Setup Test"
msg["From"] = environ.get("EMAIL_FROM", "netureon@localhost")
msg["To"] = environ.get("EMAIL_TO", "admin@localhost")

smtp_host = environ.get("SMTP_HOST", "localhost")
smtp_port = int(environ.get("SMTP_PORT", "25"))

with smtplib.SMTP(smtp_host, smtp_port) as smtp:
    smtp.send_message(msg)
print("‚úÖ Test email sent successfully")
'@
    } catch {
        Write-Host "‚ùå Failed to send test email: $_" -ForegroundColor Red
    }
}

Write-Host "üéâ Setup complete! Services are ready to start." -ForegroundColor Green
Write-Host "Use 'Start-Service Netureon' to start the main service" -ForegroundColor Yellow
Write-Host "Use 'Start-Service NetureonWeb' to start the web interface" -ForegroundColor Yellow
Write-Host "Use 'Start-Service NetureonAlerts' to start the alert daemon" -ForegroundColor Yellow
